cacheSolve <- function(x, ...) {
invesre<-x$getInverse()
if(!is.null(inverse)){
message("getting cached data")
return(inverse)
}
data <-x$get()
inverse<-solve(data,...)
x$setInverse(inverse)
inverse
## Return a matrix that is the inverse of 'x'
}
inverse<-x$getInverse()
m$get
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <-function(y){
x<<-y
inv <<- NULL
}
get<-function() x
setInverse<-function(inverse) inv <<-inverse
getInverse<-function() inv
list(set = set, get = get,
setInverse= setInverse,
getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv<-x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <-x$get()
inverse<-solve(data)
x$setInverse(inv)
inv
## Return a matrix that is the inverse of 'x'
}
#Sample run:
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <-function(y){
x<<-y
inv <<- NULL
}
get<-function() x
setInverse<-function(inverse) inv <<-inverse
getInverse<-function() inv
list(set = set, get = get,
setInverse= setInverse,
getInverse=getInverse)
}
cacheSolve <- function(x, ...) {
inv<-x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <-x$get()
inverse<-solve(data)
x$setInverse(inv)
inv
## Return a matrix that is the inverse of 'x'
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get
cacheSolve(m)
cacheSolve <- function(x, ...) {
inv<-x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <-x$get()
inv<-solve(data)
x$setInverse(inv)
inv
## Return a matrix that is the inverse of 'x'
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <-function(y){
x<<-y
inv <<- NULL
}
get<-function() x
setInverse<-function(inverse) inv <<-inverse
getInverse<-function() inv
list(set = set, get = get,
setInverse= setInverse,
getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv<-x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <-x$get()
inv<-solve(data)
x$setInverse(inv)
inv
## Return a matrix that is the inverse of 'x'
}
#Sample run:
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get
cacheSolve(m)
?inverse
??inverse
cacheSolve(m)
